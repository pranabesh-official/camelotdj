name: Publish to GitHub Packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      publish_npm:
        description: 'Publish to npm registry'
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  publish-npm:
    if: github.event.inputs.publish_npm == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build project
      run: |
        npm run python-build
        npm run react-build
        tsc -p tsconfig.electronMain.json
        
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-github-packages:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://npm.pkg.github.com'
        scope: '@${{ github.repository_owner }}'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build project
      run: |
        npm run python-build
        npm run react-build
        tsc -p tsconfig.electronMain.json
        
    - name: Publish to GitHub Packages
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release-assets:
    runs-on: ubuntu-latest
    needs: [publish-github-packages]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Create release archive
      run: |
        mkdir -p release-assets
        find artifacts/ -name "*.zip" -o -name "*.exe" -o -name "*.dmg" | while read file; do
          cp "$file" release-assets/
        done
        
    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets-${{ github.event.inputs.version }}
        path: release-assets/
        retention-days: 90
